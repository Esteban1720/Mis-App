import 'dart:io';
import 'package:flutter/material.dart';
import 'package:file_picker/file_picker.dart';
import 'package:path_provider/path_provider.dart';

import '../models/profile.dart';
import '../services/profile_service.dart';
import '../services/audio_service.dart';
import 'home_screen.dart';
import '../widgets/gamepad_listener.dart';
import 'settings_panel.dart';
import '../widgets/onscreen_keyboard.dart';

class EmuChullLoginScreen extends StatefulWidget {
  const EmuChullLoginScreen({super.key});

  @override
  State<EmuChullLoginScreen> createState() => _EmuChullLoginScreenState();
}

class _EmuChullLoginScreenState extends State<EmuChullLoginScreen> {
  final ProfileService _svc = ProfileService.instance;
  List<Profile> _profiles = [];
  bool _loading = true;

  int _selectedIndex = 0;
  final Color bg = const Color(0xFF0F1113);
  final ScrollController _scrollController = ScrollController();

  @override
  void initState() {
    super.initState();
    _loadProfiles();
  }

  @override
  void dispose() {
    _scrollController.dispose();
    super.dispose();
  }

  Future<void> _loadProfiles() async {
    _profiles = await _svc.loadProfiles();
    if (mounted) setState(() => _loading = false);
  }

  Future<String?> _pickAvatarAndSave(String id) async {
    try {
      final res = await FilePicker.platform.pickFiles(type: FileType.image);
      if (res == null || res.files.isEmpty) return null;
      final file = File(res.files.single.path!);
      final dir = await getApplicationDocumentsDirectory();
      final dest = File('${dir.path}/avatars_$id.png');
      await file.copy(dest.path);
      return dest.path;
    } catch (_) {
      return null;
    }
  }

  Future<void> _showAddProfile() async {
    String? avatarPath;
    String? pin;
    bool isPrivate = false;
    final nameCtl = TextEditingController();
    await showDialog<void>(
      context: context,
      builder: (ctx) => _buildAddProfileDialog(
          ctx,
          nameCtl,
          () async {
            final id = DateTime.now().millisecondsSinceEpoch.toString();
            final path = await _pickAvatarAndSave(id);
            if (path != null) avatarPath = path;
          },
          (v) => isPrivate = v,
          () => isPrivate,
          (v) => pin = v,
          () async {
            final name = nameCtl.text.trim();
            if (name.isEmpty) return;
            final id = DateTime.now().millisecondsSinceEpoch.toString();
            String? pinHash;
            if (isPrivate) {
              if (pin?.length != 4) {
                ScaffoldMessenger.of(context).showSnackBar(const SnackBar(
                    content: Text('El PIN debe tener 4 dígitos')));
                return;
              }
              pinHash = _svc.hashPin(pin!);
            }
            final p = Profile(
                id: id,
                name: name,
                avatarPath: avatarPath,
                isPrivate: isPrivate,
                pinHash: pinHash);
            _profiles.add(p);
            await _svc.saveProfiles(_profiles);
            if (mounted) setState(() {});
            Navigator.of(ctx).pop();
          }),
    );
  }

  Widget _buildAddProfileDialog(
      BuildContext ctx,
      TextEditingController nameCtl,
      Future<void> Function() onAvatar,
      ValueChanged<bool> onPrivate,
      bool Function() getPrivate,
      ValueChanged<String> onPin,
      Future<void> Function() onCreate) {
    return AlertDialog(
      backgroundColor: const Color(0xFF121316),
      content: StatefulBuilder(builder: (ctx2, setSt) {
        return SizedBox(
          width: 420,
          child: SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                TextField(
                    controller: nameCtl,
                    decoration:
                        const InputDecoration(labelText: 'Nombre del perfil')),
                const SizedBox(height: 12),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    const Text('Privado (PIN de 4 dígitos)',
                        style: TextStyle(color: Colors.white)),
                    Switch(
                        value: getPrivate(),
                        onChanged: (v) {
                          onPrivate(v);
                          setSt(() {});
                        })
                  ],
                ),
                if (getPrivate()) ...[
                  const SizedBox(height: 8),
                  TextField(
                      keyboardType: TextInputType.number,
                      maxLength: 4,
                      obscureText: true,
                      decoration:
                          const InputDecoration(labelText: 'PIN (4 dígitos)'),
                      onChanged: onPin),
                ],
                const SizedBox(height: 10),
                ElevatedButton.icon(
                  onPressed: () async {
                    await onAvatar();
                    setSt(() {});
                  },
                  icon: const Icon(Icons.photo),
                  label: const Text('Seleccionar avatar'),
                  style:
                      ElevatedButton.styleFrom(backgroundColor: Colors.white),
                ),
              ],
            ),
          ),
        );
      }),
      actions: [
        TextButton(
            onPressed: () => Navigator.of(ctx).pop(),
            child: const Text('Cancelar')),
        ElevatedButton(onPressed: () async { await onCreate(); }, child: const Text('Crear perfil'))
      ],
    );
  }

  Future<bool> _askForPinAndVerify(Profile p) async {
    // Use the OnScreenKeyboard for PIN entry (numeric keypad and gamepad support)
    final result = await showGeneralDialog<String>(
      context: context,
      barrierDismissible: true,
      barrierLabel: 'keyboard',
      transitionDuration: const Duration(milliseconds: 160),
      pageBuilder: (ctx, a1, a2) {
        final mq = MediaQuery.of(ctx);
        final dialogMaxWidth = mq.size.width * 0.95;
        final dialogMaxHeight = mq.size.height * 0.92;

        return SafeArea(
          child: Center(
            child: ConstrainedBox(
              constraints: BoxConstraints(
                  maxWidth: dialogMaxWidth,
                  maxHeight: dialogMaxHeight,
                  minWidth: 280),
              child: OnScreenKeyboard(
                  initialValue: '', title: 'Ingresa PIN', maxLength: 4, isPin: true),
            ),
          ),
        );
      },
    );

    if (result == null) return false;
    final pinInput = result.trim();
    if (pinInput.length != 4) {
      ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('El PIN debe tener 4 dígitos')));
      return false;
    }
    final hash = _svc.hashPin(pinInput);
    final ok = hash == p.pinHash;
    if (!ok) {
      ScaffoldMessenger.of(context)
          .showSnackBar(const SnackBar(content: Text('PIN incorrecto')));
    }
    return ok;
  }

  Future<void> _onSelectProfile(Profile p) async {
    if (p.isPrivate && !(await _askForPinAndVerify(p))) return;
    if (!mounted) return;
    ProfileService.instance.setCurrentProfile(p);
    Navigator.of(context)
        .pushReplacement(MaterialPageRoute(builder: (_) => const HomeScreen()));
    AudioService.instance.playAction();
  }

  int get _maxIndex => _profiles.length + 2;

  void _changeSelected(int newIndex) {
    final max = _maxIndex;
    if (newIndex < 0) newIndex = 0;
    if (newIndex > max) newIndex = max;
    if (newIndex == _selectedIndex) return;
    setState(() => _selectedIndex = newIndex);
    const itemExtent = 128.0;
    final target =
        (newIndex <= _profiles.length ? newIndex : _profiles.length) *
            itemExtent;
    try {
      _scrollController.animateTo(target,
          duration: const Duration(milliseconds: 220), curve: Curves.easeOut);
    } catch (_) {}
    try {
      AudioService.instance.playAction();
    } catch (_) {}
  }

  Future<void> _confirmDeleteProfile(Profile p) async {
    final confirmed = await showDialog<bool>(
      context: context,
      builder: (ctx) => AlertDialog(
        backgroundColor: const Color(0xFF121316),
        title: const Text('Eliminar perfil'),
        content: Text(
            '¿Eliminar el perfil "${p.name}"? Esta acción no se puede deshacer.'),
        actions: [
          TextButton(
              onPressed: () => Navigator.of(ctx).pop(false),
              child: const Text('Cancelar')),
          ElevatedButton(
              onPressed: () => Navigator.of(ctx).pop(true),
              child: const Text('Eliminar')),
        ],
      ),
    );
    if (confirmed != true) return;
    _profiles.removeWhere((x) => x.id == p.id);
    await _svc.saveProfiles(_profiles);
    if (_selectedIndex > _profiles.length)
      _selectedIndex = _profiles.length + 1;
    if (mounted) setState(() {});
  }

  Widget _buildProfileTile(Profile p, bool focused, int index) {
    return FocusableActionDetector(
      autofocus: focused,
      onShowFocusHighlight: (hasFocus) {
        if (hasFocus && _selectedIndex != index) setState(() => _selectedIndex = index);
      },
      child: GestureDetector(
        onTap: () => _onSelectProfile(p),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Stack(
              clipBehavior: Clip.none,
              children: [
                AnimatedContainer(
                  duration: const Duration(milliseconds: 160),
                  width: focused ? 96 : 88,
                  height: focused ? 96 : 88,
                  decoration: BoxDecoration(
                      shape: BoxShape.circle,
                      color: const Color(0xFF1B1C1E),
                      border: Border.all(
                          color: focused ? Colors.white : Colors.transparent,
                          width: 2)),
                  child: ClipOval(
                    child: p.avatarPath != null &&
                            File(p.avatarPath!).existsSync()
                        ? Image.file(File(p.avatarPath!),
                            fit: BoxFit.cover, width: 96, height: 96)
                        : Center(
                            child: Text(
                                p.name.isNotEmpty ? p.name[0].toUpperCase() : '?',
                                style: const TextStyle(
                                    color: Colors.white, fontSize: 28))),
                  ),
                ),
                if (focused)
                  Positioned(
                    right: -6,
                    top: -6,
                    child: Tooltip(
                      message: 'Eliminar perfil',
                      child: Material(
                        color: Colors.transparent,
                        child: InkWell(
                          borderRadius: BorderRadius.circular(20),
                          onTap: () async {
                            await _confirmDeleteProfile(p);
                          },
                          child: Container(
                            width: 28,
                            height: 28,
                            decoration: BoxDecoration(
                              color: const Color(0xFF2A2B2C),
                              borderRadius: BorderRadius.circular(20),
                              border: Border.all(
                                  color: Colors.redAccent.withOpacity(0.9),
                                  width: 1.2),
                            ),
                            child: const Icon(Icons.delete,
                                size: 16, color: Colors.redAccent),
                          ),
                        ),
                      ),
                    ),
                  ),
              ],
            ),
            const SizedBox(height: 8),
            SizedBox(
                width: 110,
                child: Text(p.name,
                    overflow: TextOverflow.ellipsis,
                    textAlign: TextAlign.center,
                    style: const TextStyle(color: Colors.white))),
          ],
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: bg,
      body: GamepadListener(
        onLeft: () => _changeSelected(_selectedIndex - 1),
        onRight: () => _changeSelected(_selectedIndex + 1),
        onUp: () => _changeSelected(_selectedIndex - 1),
        onDown: () => _changeSelected(_selectedIndex + 1),
        onActivate: () {
          if (_selectedIndex == 0) {
            _showAddProfile();
          } else if (_selectedIndex > 0 && _selectedIndex <= _profiles.length) {
            _onSelectProfile(_profiles[_selectedIndex - 1]);
          } else if (_selectedIndex == _profiles.length + 1) {
            Navigator.of(context)
                .push(MaterialPageRoute(builder: (_) => SettingsPanel()));
          } else if (_selectedIndex == _profiles.length + 2) {
            exit(0);
          }
        },
        onBack: () => Navigator.maybePop(context),
        child: SafeArea(
          child: _loading
              ? const Center(child: CircularProgressIndicator())
              : Padding(
                  padding:
                      const EdgeInsets.symmetric(horizontal: 20, vertical: 24),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(children: [
                        Container(
                          width: 86,
                          height: 86,
                          decoration: BoxDecoration(
                              color: const Color(0xFF18191A),
                              borderRadius: BorderRadius.circular(18)),
                          child: const Center(
                              child: Icon(Icons.videogame_asset,
                                  color: Colors.white, size: 38)),
                        ),
                        const SizedBox(width: 14),
                        const Text('EMUCHULL',
                            style: TextStyle(
                                color: Colors.white,
                                fontSize: 42,
                                fontWeight: FontWeight.w900)),
                      ]),
                      const SizedBox(height: 30),
                      const Text('¿Quién está usando este control?',
                          style: TextStyle(color: Colors.white, fontSize: 18)),
                      const SizedBox(height: 18),
                      SizedBox(
                        height: 160,
                        child: ListView.separated(
                          controller: _scrollController,
                          scrollDirection: Axis.horizontal,
                          itemCount: _profiles.length + 1,
                          separatorBuilder: (context, index) =>
                              const SizedBox(width: 18),
                          itemBuilder: (context, i) {
                            if (i == 0) {
                              final focused = _selectedIndex == 0;
                              return FocusableActionDetector(
                                autofocus: focused,
                                onShowFocusHighlight: (hasFocus) {
                                  if (hasFocus && _selectedIndex != 0)
                                    setState(() => _selectedIndex = 0);
                                },
                                child: GestureDetector(
                                  onTap: _showAddProfile,
                                  child: Column(children: [
                                    AnimatedContainer(
                                      duration: const Duration(milliseconds: 160),
                                      width: focused ? 96 : 88,
                                      height: focused ? 96 : 88,
                                      decoration: BoxDecoration(
                                          color: const Color(0xFF1B1C1E),
                                          borderRadius:
                                              BorderRadius.circular(999),
                                          border: Border.all(
                                              color: focused ? Colors.white : Colors.transparent,
                                              width: 2
                                          )
                                      ),
                                      child: const Center(
                                          child: Icon(Icons.add,
                                              color: Colors.white, size: 38)),
                                    ),
                                    const SizedBox(height: 8),
                                    SizedBox(
                                        width: 110,
                                        child: const Text('Agregar usuario',
                                            textAlign: TextAlign.center,
                                            style:
                                                TextStyle(color: Colors.white))),
                                  ]),
                                ),
                              );
                            } else {
                              return _buildProfileTile(
                                  _profiles[i - 1], _selectedIndex == i, i);
                            }
                          },
                        ),
                      ),
                      const Spacer(),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Text('Selecciona un perfil para continuar',
                              style: TextStyle(
                                  color: Colors.white.withOpacity(0.75))),
                          Row(children: [
                            FocusableActionDetector(
                              autofocus: _selectedIndex == _profiles.length + 1,
                              onShowFocusHighlight: (hasFocus) {
                                if (hasFocus &&
                                    _selectedIndex != _profiles.length + 1)
                                  setState(() =>
                                      _selectedIndex = _profiles.length + 1);
                              },
                              child: Container(
                                decoration: _selectedIndex == _profiles.length + 1
                                    ? BoxDecoration(
                                        border: Border.all(color: Colors.white, width: 2.0),
                                        borderRadius: BorderRadius.circular(8.0),
                                      )
                                    : null,
                                child: IconButton(
                                  onPressed: () => Navigator.of(context).push(
                                      MaterialPageRoute(
                                          builder: (_) => SettingsPanel())),
                                  icon: Icon(Icons.settings,
                                      color:
                                          _selectedIndex == _profiles.length + 1
                                              ? Colors.white
                                              : Colors.white),
                                ),
                              ),
                            ),
                            const SizedBox(width: 8),
                            FocusableActionDetector(
                              autofocus: _selectedIndex == _profiles.length + 2,
                              onShowFocusHighlight: (hasFocus) {
                                if (hasFocus &&
                                    _selectedIndex != _profiles.length + 2)
                                  setState(() =>
                                      _selectedIndex = _profiles.length + 2);
                              },
                              child: Container(
                                decoration: _selectedIndex == _profiles.length + 2
                                    ? BoxDecoration(
                                        border: Border.all(color: Colors.white, width: 2.0),
                                        borderRadius: BorderRadius.circular(8.0),
                                      )
                                    : null,
                                child: IconButton(
                                  onPressed: () => exit(0),
                                  icon: Icon(Icons.power_settings_new,
                                      color:
                                          _selectedIndex == _profiles.length + 2
                                              ? Colors.white
                                              : Colors.white),
                                ),
                              ),
                            ),
                          ])
                        ],
                      )
                    ],
                  ),
                ),
        ),
      ),
    );
  }
}
