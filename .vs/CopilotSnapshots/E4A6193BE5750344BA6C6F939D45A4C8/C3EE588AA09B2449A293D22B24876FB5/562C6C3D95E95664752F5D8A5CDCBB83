import 'dart:io';
import 'package:flutter/material.dart';
import 'package:file_picker/file_picker.dart';
import 'package:path_provider/path_provider.dart';

import '../models/profile.dart';
import '../services/profile_service.dart';
import '../services/audio_service.dart';
import 'home_screen.dart';
import '../widgets/gamepad_listener.dart';
import 'settings_panel.dart';
import '../widgets/onscreen_keyboard.dart';
import '../services/input_service.dart';

class EmuChullLoginScreen extends StatefulWidget {
  const EmuChullLoginScreen({super.key});

  @override
  State<EmuChullLoginScreen> createState() => _EmuChullLoginScreenState();
}

class _EmuChullLoginScreenState extends State<EmuChullLoginScreen> {
  final ProfileService _svc = ProfileService.instance;
  List<Profile> _profiles = [];
  bool _loading = true;

  int _selectedIndex = 0;
  final Color bg = const Color(0xFF0F1113);
  final ScrollController _scrollController = ScrollController();

  @override
  void initState() {
    super.initState();
    _loadProfiles();
  }

  @override
  void dispose() {
    _scrollController.dispose();
    super.dispose();
  }

  Future<void> _loadProfiles() async {
    _profiles = await _svc.loadProfiles();
    if (mounted) setState(() => _loading = false);
  }

  Future<String?> _pickAvatarAndSave(String id) async {
    try {
      final res = await FilePicker.platform.pickFiles(type: FileType.image);
      if (res == null || res.files.isEmpty) return null;
      final file = File(res.files.single.path!);
      final dir = await getApplicationDocumentsDirectory();
      final dest = File('${dir.path}/avatars_$id.png');
      await file.copy(dest.path);
      return dest.path;
    } catch (_) {
      return null;
    }
  }

  Future<void> _showAddProfile() async {
    String? avatarPath;
    String? pin;
    bool isPrivate = false;
    final nameCtl = TextEditingController();

    // Push an input listener so the controller works while dialog is open
    final removeListener = InputService.instance.pushListener(
      InputListener(
        onLeft: () => FocusScope.of(context).previousFocus(),
        onRight: () => FocusScope.of(context).nextFocus(),
        onUp: () => FocusScope.of(context).previousFocus(),
        onDown: () => FocusScope.of(context).nextFocus(),
        onActivate: () => Actions.invoke(context, const ActivateIntent()),
        onBack: () => Navigator.of(context).maybePop(),
      ),
    );

    try {
      await showDialog<void>(
        context: context,
        barrierDismissible: true,
        builder: (ctx) {
          return StatefulBuilder(builder: (ctx2, setSt) {
            Future<void> openNameKeyboard() async {
              final result = await showGeneralDialog<String>(
                context: ctx2,
                barrierDismissible: true,
                barrierLabel: 'keyboard',
                transitionDuration: const Duration(milliseconds: 160),
                pageBuilder: (kctx, a1, a2) {
                  final mq = MediaQuery.of(kctx);
                  final dialogMaxWidth = mq.size.width * 0.95;
                  final dialogMaxHeight = mq.size.height * 0.92;
                  return SafeArea(
                    child: Center(
                      child: ConstrainedBox(
                        constraints: BoxConstraints(
                            maxWidth: dialogMaxWidth,
                            maxHeight: dialogMaxHeight,
                            minWidth: 280),
                        child: OnScreenKeyboard(
                          initialValue: nameCtl.text,
                          title: 'Nombre del perfil',
                          maxLength: 24,
                          isPin: false,
                        ),
                      ),
                    ),
                  );
                },
              );
              if (result != null) {
                nameCtl.text = result.trim();
                setSt(() {});
              }
            }

            Future<void> openPinKeyboard() async {
              final result = await showGeneralDialog<String>(
                context: ctx2,
                barrierDismissible: true,
                barrierLabel: 'keyboard_pin',
                transitionDuration: const Duration(milliseconds: 160),
                pageBuilder: (kctx, a1, a2) {
                  final mq = MediaQuery.of(kctx);
                  final dialogMaxWidth = mq.size.width * 0.95;
                  final dialogMaxHeight = mq.size.height * 0.92;
                  return SafeArea(
                    child: Center(
                      child: ConstrainedBox(
                        constraints: BoxConstraints(
                            maxWidth: dialogMaxWidth,
                            maxHeight: dialogMaxHeight,
                            minWidth: 280),
                        child: OnScreenKeyboard(
                          initialValue: pin ?? '',
                          title: 'Ingrese PIN (4 dígitos)',
                          maxLength: 4,
                          isPin: true,
                        ),
                      ),
                    ),
                  );
                },
              );
              if (result != null) {
                pin = result.trim();
                setSt(() {});
              }
            }

            return AlertDialog(
              backgroundColor: const Color(0xFF121316),
              content: SizedBox(
                width: 480,
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    GestureDetector(
                      onTap: openNameKeyboard,
                      child: Container(
                        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 10),
                        decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(8),
                          color: Colors.transparent,
                        ),
                        child: Row(
                          children: [
                            Expanded(
                              child: TextField(
                                controller: nameCtl,
                                readOnly: true,
                                decoration: const InputDecoration.collapsed(hintText: 'Nombre del perfil'),
                                style: const TextStyle(color: Colors.white),
                              ),
                            ),
                            const SizedBox(width: 8),
                            Icon(Icons.keyboard, color: Colors.white70)
                          ],
                        ),
                      ),
                    ),
                    const SizedBox(height: 12),
                    GestureDetector(
                      onTap: () => setSt(() => isPrivate = !isPrivate),
                      child: Container(
                        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 10),
                        decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(8),
                          color: Colors.transparent,
                        ),
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            const Text('Privado (PIN de 4 dígitos)', style: TextStyle(color: Colors.white)),
                            Switch(value: isPrivate, onChanged: (v) => setSt(() => isPrivate = v))
                          ],
                        ),
                      ),
                    ),
                    if (isPrivate) ...[
                      const SizedBox(height: 8),
                      GestureDetector(
                        onTap: openPinKeyboard,
                        child: Container(
                          padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 10),
                          decoration: BoxDecoration(
                            borderRadius: BorderRadius.circular(8),
                            color: Colors.transparent,
                          ),
                          child: Row(
                            children: [
                              Expanded(child: Text(pin != null && pin!.isNotEmpty ? 'PIN: ****' : 'PIN (4 dígitos)', style: const TextStyle(color: Colors.white))),
                              const SizedBox(width: 8),
                              Icon(Icons.lock, color: Colors.white70)
                            ],
                          ),
                        ),
                      ),
                    ],
                    const SizedBox(height: 10),
                    GestureDetector(
                      onTap: () async {
                        final id = DateTime.now().millisecondsSinceEpoch.toString();
                        final path = await _pickAvatarAndSave(id);
                        if (path != null) {
                          avatarPath = path;
                          setSt(() {});
                        }
                      },
                      child: Container(
                        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 10),
                        decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(8),
                          color: Colors.transparent,
                        ),
                        child: Row(
                          children: [
                            Expanded(child: Text(avatarPath != null ? 'Avatar seleccionado' : 'Seleccionar avatar', style: const TextStyle(color: Colors.white))),
                            const SizedBox(width: 8),
                            Icon(Icons.photo, color: Colors.white70)
                          ],
                        ),
                      ),
                    ),
                  ],
                ),
              ),
              actions: [
                TextButton(
                  onPressed: () => Navigator.of(ctx).pop(),
                  child: const Text('Cancelar'),
                ),
                ElevatedButton(
                  onPressed: () async {
                    final name = nameCtl.text.trim();
                    if (name.isEmpty) {
                      ScaffoldMessenger.of(ctx).showSnackBar(const SnackBar(content: Text('El nombre no puede estar vacío')));
                      return;
                    }
                    if (isPrivate) {
                      if (pin == null || pin!.length != 4) {
                        ScaffoldMessenger.of(ctx).showSnackBar(const SnackBar(content: Text('El PIN debe tener 4 dígitos')));
                        return;
                      }
                    }
                    final id = DateTime.now().millisecondsSinceEpoch.toString();
                    String? pinHash;
                    if (isPrivate) pinHash = _svc.hashPin(pin!);
                    final p = Profile(id: id, name: name, avatarPath: avatarPath, isPrivate: isPrivate, pinHash: pinHash);
                    _profiles.add(p);
                    await _svc.saveProfiles(_profiles);
                    if (mounted) setState(() {});
                    Navigator.of(ctx).pop();
                  },
                  child: const Text('Crear perfil'),
                ),
              ],
            );
          });
        },
      );
    } finally {
      try { removeListener(); } catch (_) {}
      try { nameCtl.dispose(); } catch (_) {}
    }
  }

  Future<bool> _askForPinAndVerify(Profile p) async {
    final result = await showGeneralDialog<String>(
      context: context,
      barrierDismissible: true,
      barrierLabel: 'keyboard',
      transitionDuration: const Duration(milliseconds: 160),
      pageBuilder: (ctx, a1, a2) {
        final mq = MediaQuery.of(ctx);
        final dialogMaxWidth = mq.size.width * 0.95;
        final dialogMaxHeight = mq.size.height * 0.92;
        return SafeArea(
          child: Center(
            child: ConstrainedBox(
              constraints: BoxConstraints(
                  maxWidth: dialogMaxWidth,
                  maxHeight: dialogMaxHeight,
                  minWidth: 280),
              child: OnScreenKeyboard(
                  initialValue: '', title: 'Ingresa PIN', maxLength: 4, isPin: true),
            ),
          ),
        );
      },
    );
    if (result == null) return false;
    final pinInput = result.trim();
    if (pinInput.length != 4) {
      ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('El PIN debe tener 4 dígitos')));
      return false;
    }
    final hash = _svc.hashPin(pinInput);
    final ok = hash == p.pinHash;
    if (!ok) {
      ScaffoldMessenger.of(context)
          .showSnackBar(const SnackBar(content: Text('PIN incorrecto')));
    }
    return ok;
  }

  Future<void> _onSelectProfile(Profile p) async {
    if (p.isPrivate && !(await _askForPinAndVerify(p))) return;
    if (!mounted) return;
    ProfileService.instance.setCurrentProfile(p);
    Navigator.of(context)
        .pushReplacement(MaterialPageRoute(builder: (_) => const HomeScreen()));
    AudioService.instance.playAction();
  }

  int get _maxIndex => _profiles.length + 2;

  void _changeSelected(int newIndex) {
    final max = _maxIndex;
    if (newIndex < 0) newIndex = 0;
    if (newIndex > max) newIndex = max;
    if (newIndex == _selectedIndex) return;
    setState(() => _selectedIndex = newIndex);
    const itemExtent = 128.0;
    final target =
        (newIndex <= _profiles.length ? newIndex : _profiles.length) *
            itemExtent;
    try {
      _scrollController.animateTo(target,
          duration: const Duration(milliseconds: 220), curve: Curves.easeOut);
    } catch (_) {}
    try {
      AudioService.instance.playAction();
    } catch (_) {}
  }

  Future<void> _confirmDeleteProfile(Profile p) async {
    final confirmed = await showDialog<bool>(
      context: context,
      builder: (ctx) => AlertDialog(
        backgroundColor: const Color(0xFF121316),
        title: const Text('Eliminar perfil'),
        content: Text(
            '¿Eliminar el perfil "${p.name}"? Esta acción no se puede deshacer.'),
        actions: [
          TextButton(
              onPressed: () => Navigator.of(ctx).pop(false),
              child: const Text('Cancelar')),
          ElevatedButton(
              onPressed: () => Navigator.of(ctx).pop(true),
              child: const Text('Eliminar')),
        ],
      ),
    );
    if (confirmed != true) return;
    _profiles.removeWhere((x) => x.id == p.id);
    await _svc.saveProfiles(_profiles);
    if (_selectedIndex > _profiles.length)
      _selectedIndex = _profiles.length + 1;
    if (mounted) setState(() {});
  }

  Widget _buildProfileTile(Profile p, bool focused, int index) {
    return FocusableActionDetector(
      autofocus: focused,
      onShowFocusHighlight: (hasFocus) {
        if (hasFocus && _selectedIndex != index) setState(() => _selectedIndex = index);
      },
      child: GestureDetector(
        onTap: () => _onSelectProfile(p),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Stack(
              clipBehavior: Clip.none,
              children: [
                AnimatedContainer(
                  duration: const Duration(milliseconds: 160),
                  width: focused ? 96 : 88,
                  height: focused ? 96 : 88,
                  decoration: BoxDecoration(
                      shape: BoxShape.circle,
                      color: const Color(0xFF1B1C1E),
                      border: Border.all(
                          color: focused ? Colors.white : Colors.transparent,
                          width: 2)),
                  child: ClipOval(
                    child: p.avatarPath != null &&
                            File(p.avatarPath!).existsSync()
                        ? Image.file(File(p.avatarPath!),
                            fit: BoxFit.cover, width: 96, height: 96)
                        : Center(
                            child: Text(
                                p.name.isNotEmpty ? p.name[0].toUpperCase() : '?',
                                style: const TextStyle(
                                    color: Colors.white, fontSize: 28))),
                  ),
                ),
                if (focused)
                  Positioned(
                    right: -6,
                    top: -6,
                    child: Tooltip(
                      message: 'Eliminar perfil',
                      child: Material(
                        color: Colors.transparent,
                        child: InkWell(
                          borderRadius: BorderRadius.circular(20),
                          onTap: () async {
                            await _confirmDeleteProfile(p);
                          },
                          child: Container(
                            width: 28,
                            height: 28,
                            decoration: BoxDecoration(
                              color: const Color(0xFF2A2B2C),
                              borderRadius: BorderRadius.circular(20),
                              border: Border.all(
                                  color: Colors.redAccent.withOpacity(0.9),
                                  width: 1.2),
                            ),
                            child: const Icon(Icons.delete,
                                size: 16, color: Colors.redAccent),
                          ),
                        ),
                      ),
                    ),
                  ),
              ],
            ),
            const SizedBox(height: 8),
            SizedBox(
                width: 110,
                child: Text(p.name,
                    overflow: TextOverflow.ellipsis,
                    textAlign: TextAlign.center,
                    style: const TextStyle(color: Colors.white))),
          ],
        ),
      ),
    );
  }
}
// END OF FILE
