import 'dart:io';

import 'package:flutter/material.dart';
import 'package:file_picker/file_picker.dart';
import '../services/profile_service.dart';
import '../models/profile.dart';
import '../widgets/gamepad_listener.dart';
import 'emulator_screen.dart'; // Para OnScreenKeyboard

class ProfileHomeScreen extends StatefulWidget {
  const ProfileHomeScreen({Key? key, required this.profile}) : super(key: key);
  final Profile profile;

  @override
  State<ProfileHomeScreen> createState() => _ProfileHomeScreenState();
}

class _ProfileHomeScreenState extends State<ProfileHomeScreen> {
  late TextEditingController _nameController;
  late TextEditingController _pinController;
  String? _avatarPath;
  bool _saving = false;
  int _selectedIndex = 0; // 0: avatar, 1: cambiar avatar, 2: nombre, 3: pin, 4: guardar
  final int _maxIndex = 4;

  @override
  void initState() {
    super.initState();
    _nameController = TextEditingController(text: widget.profile.name);
    _pinController = TextEditingController();
    _avatarPath = widget.profile.avatarPath;
  }

  @override
  void dispose() {
    _nameController.dispose();
    _pinController.dispose();
    super.dispose();
  }

  void _changeSelected(int newIndex) {
    if (newIndex < 0) newIndex = 0;
    if (newIndex > _maxIndex) newIndex = _maxIndex;
    setState(() => _selectedIndex = newIndex);
  }

  Future<void> _pickAvatar() async {
    final result = await FilePicker.platform.pickFiles(
      type: FileType.image,
      allowMultiple: false,
    );
    if (result == null) return;
    final path = result.files.first.path;
    if (path == null) return;
    setState(() => _avatarPath = path);
  }

  Future<void> _showKeyboardForName() async {
    final result = await showDialog<String>(
      context: context,
      builder: (ctx) => OnScreenKeyboard(
        initialValue: _nameController.text,
        title: 'Editar nombre',
        maxLength: 24,
      ),
    );
    if (result != null) {
      setState(() => _nameController.text = result);
    }
  }

  Future<void> _showKeyboardForPin() async {
    final result = await showDialog<String>(
      context: context,
      builder: (ctx) => OnScreenKeyboard(
        initialValue: _pinController.text,
        title: 'Editar PIN',
        maxLength: 8,
        isPin: true,
      ),
    );
    if (result != null) {
      setState(() => _pinController.text = result);
    }
  }

  Future<void> _save() async {
    setState(() => _saving = true);
    final p = widget.profile;
    p.name = _nameController.text.trim();
    p.avatarPath = _avatarPath;
    final pin = _pinController.text.trim();
    if (pin.isNotEmpty) {
      p.pinHash = ProfileService.instance.hashPin(pin);
      p.isPrivate = true;
    }

    // Load, update and save profiles list
    final profiles = await ProfileService.instance.loadProfiles();
    final idx = profiles.indexWhere((x) => x.id == p.id);
    if (idx >= 0) {
      profiles[idx] = p;
    } else {
      profiles.add(p);
    }
    await ProfileService.instance.saveProfiles(profiles);

    // Also update runtime currentProfile if matches
    if (ProfileService.instance.currentProfile?.id == p.id) {
      ProfileService.instance.setCurrentProfile(p);
    }

    setState(() => _saving = false);
    if (mounted) Navigator.of(context).pop(true);
  }

  void _activateCurrent() {
    switch (_selectedIndex) {
      case 0:
        _pickAvatar();
        break;
      case 1:
        _pickAvatar();
        break;
      case 2:
        _showKeyboardForName();
        break;
      case 3:
        _showKeyboardForPin();
        break;
      case 4:
        if (!_saving) _save();
        break;
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Editar perfil')),
      body: GamepadListener(
        onLeft: () => _changeSelected(_selectedIndex - 1),
        onRight: () => _changeSelected(_selectedIndex + 1),
        onUp: () => _changeSelected(_selectedIndex - 1),
        onDown: () => _changeSelected(_selectedIndex + 1),
        onActivate: _activateCurrent,
        onBack: () => Navigator.maybePop(context),
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(children: [
            const SizedBox(height: 8),
            FocusableActionDetector(
              autofocus: _selectedIndex == 0,
              onShowFocusHighlight: (hasFocus) {
                if (hasFocus && _selectedIndex != 0) {
                  setState(() => _selectedIndex = 0);
                }
              },
              child: GestureDetector(
                onTap: _pickAvatar,
                child: CircleAvatar(
                  radius: 48,
                  backgroundImage:
                      _avatarPath != null ? FileImage(File(_avatarPath!)) : null,
                  child: _avatarPath == null
                      ? const Icon(Icons.person, size: 48)
                      : null,
                  backgroundColor: _selectedIndex == 0 ? Colors.amber : null,
                ),
              ),
            ),
            const SizedBox(height: 12),
            FocusableActionDetector(
              autofocus: _selectedIndex == 1,
              onShowFocusHighlight: (hasFocus) {
                if (hasFocus && _selectedIndex != 1) {
                  setState(() => _selectedIndex = 1);
                }
              },
              child: TextButton.icon(
                icon: const Icon(Icons.photo),
                label: const Text('Cambiar avatar'),
                onPressed: _pickAvatar,
                style: ButtonStyle(
                  backgroundColor: MaterialStateProperty.resolveWith<Color?>(
                    (states) => _selectedIndex == 1 ? Colors.amber[100] : null,
                  ),
                ),
              ),
            ),
            const SizedBox(height: 12),
            FocusableActionDetector(
              autofocus: _selectedIndex == 2,
              onShowFocusHighlight: (hasFocus) {
                if (hasFocus && _selectedIndex != 2) {
                  setState(() => _selectedIndex = 2);
                }
              },
              child: Container(
                decoration: BoxDecoration(
                  border: Border.all(
                    color: _selectedIndex == 2 ? Colors.amber : Colors.transparent,
                    width: 2,
                  ),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: TextField(
                  controller: _nameController,
                  decoration: const InputDecoration(labelText: 'Nombre'),
                  readOnly: true,
                  onTap: _showKeyboardForName,
                ),
              ),
            ),
            const SizedBox(height: 12),
            FocusableActionDetector(
              autofocus: _selectedIndex == 3,
              onShowFocusHighlight: (hasFocus) {
                if (hasFocus && _selectedIndex != 3) {
                  setState(() => _selectedIndex = 3);
                }
              },
              child: Container(
                decoration: BoxDecoration(
                  border: Border.all(
                    color: _selectedIndex == 3 ? Colors.amber : Colors.transparent,
                    width: 2,
                  ),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: TextField(
                  controller: _pinController,
                  decoration: const InputDecoration(
                      labelText: 'PIN (dejar en blanco para no cambiar)'),
                  obscureText: true,
                  keyboardType: TextInputType.number,
                  maxLength: 8,
                  readOnly: true,
                  onTap: _showKeyboardForPin,
                ),
              ),
            ),
            const SizedBox(height: 20),
            FocusableActionDetector(
              autofocus: _selectedIndex == 4,
              onShowFocusHighlight: (hasFocus) {
                if (hasFocus && _selectedIndex != 4) {
                  setState(() => _selectedIndex = 4);
                }
              },
              child: ElevatedButton.icon(
                icon: _saving
                    ? const SizedBox(
                        width: 16,
                        height: 16,
                        child: CircularProgressIndicator(strokeWidth: 2))
                    : const Icon(Icons.save),
                label: const Text('Guardar'),
                onPressed: _saving ? null : _save,
                style: ButtonStyle(
                  backgroundColor: MaterialStateProperty.resolveWith<Color?>(
                    (states) => _selectedIndex == 4 ? Colors.amber : null,
                  ),
                ),
              ),
            ),
          ]),
        ),
      ),
    );
  }
}
// End of profile_home.dart
