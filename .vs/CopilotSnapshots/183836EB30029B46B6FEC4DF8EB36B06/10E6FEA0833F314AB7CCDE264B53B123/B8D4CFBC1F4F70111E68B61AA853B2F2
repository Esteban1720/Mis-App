import 'package:flutter/material.dart';
import '../services/input_service.dart';

/// GamepadListener: widget que registra un InputListener mientras el widget
/// está montado y mapea eventos del mando a navegación por foco y acciones
/// estándar de Flutter (ActivateIntent, pop, next/previous focus).
class GamepadListener extends StatefulWidget {
  final Widget child;

  const GamepadListener({Key? key, required this.child}) : super(key: key);

  @override
  State<GamepadListener> createState() => _GamepadListenerState();
}

class _GamepadListenerState extends State<GamepadListener> {
  late VoidCallback _remove;

  @override
  void initState() {
    super.initState();
    final listener = InputListener(
      onLeft: _onLeft,
      onRight: _onRight,
      onUp: _onUp,
      onDown: _onDown,
      onActivate: _onActivate,
      onBack: _onBack,
    );
    _remove = InputService.instance.pushListener(listener);
  }

  void _onLeft() {
    try {
      // intentar moverse al foco previo
      FocusScope.of(context).previousFocus();
    } catch (_) {}
  }

  void _onRight() {
    try {
      FocusScope.of(context).nextFocus();
    } catch (_) {}
  }

  void _onUp() {
    try {
      FocusScope.of(context).previousFocus();
    } catch (_) {}
  }

  void _onDown() {
    try {
      FocusScope.of(context).nextFocus();
    } catch (_) {}
  }

  void _onActivate() {
    try {
      Actions.invoke(context, const ActivateIntent());
    } catch (_) {}
  }

  void _onBack() {
    try {
      Navigator.maybePop(context);
    } catch (_) {}
  }

  @override
  void dispose() {
    try {
      _remove();
    } catch (_) {}
    super.dispose();
  }

  @override
  Widget build(BuildContext context) => widget.child;
}
