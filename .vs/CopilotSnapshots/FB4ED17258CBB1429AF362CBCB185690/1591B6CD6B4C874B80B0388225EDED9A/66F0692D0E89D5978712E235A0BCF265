import 'dart:io';
import 'package:flutter/material.dart';
import 'package:file_picker/file_picker.dart';
import 'package:path_provider/path_provider.dart';

import '../models/profile.dart';
import '../services/profile_service.dart';
import '../services/audio_service.dart';
import 'home_screen.dart';
import '../widgets/gamepad_listener.dart';
import 'settings_panel.dart';
import '../widgets/onscreen_keyboard.dart';
import '../services/input_service.dart';

class EmuChullLoginScreen extends StatefulWidget {
  const EmuChullLoginScreen({super.key});

  @override
  State<EmuChullLoginScreen> createState() => _EmuChullLoginScreenState();
}

class _EmuChullLoginScreenState extends State<EmuChullLoginScreen> {
  final ProfileService _svc = ProfileService.instance;
  List<Profile> _profiles = [];
  bool _loading = true;

  int _selectedIndex = 0;
  final Color bg = const Color(0xFF0F1113);
  final ScrollController _scrollController = ScrollController();

  @override
  void initState() {
    super.initState();
    _loadProfiles();
  }

  @override
  void dispose() {
    _scrollController.dispose();
    super.dispose();
  }

  Future<void> _loadProfiles() async {
    _profiles = await _svc.loadProfiles();
    if (mounted) setState(() => _loading = false);
  }

  Future<String?> _pickAvatarAndSave(String id) async {
    try {
      final res = await FilePicker.platform.pickFiles(type: FileType.image);
      if (res == null || res.files.isEmpty) return null;
      final file = File(res.files.single.path!);
      final dir = await getApplicationDocumentsDirectory();
      final dest = File('${dir.path}/avatars_$id.png');
      await file.copy(dest.path);
      return dest.path;
    } catch (_) {
      return null;
    }
  }

  Future<void> _showAddProfile() async {
    String? avatarPath;
    String? pin;
    bool isPrivate = false;
    final nameCtl = TextEditingController();
    int selected = 0;

    final FocusNode nameFocus = FocusNode();
    final FocusNode privateFocus = FocusNode();
    final FocusNode pinFocus = FocusNode();
    final FocusNode avatarFocus = FocusNode();
    final FocusNode cancelFocus = FocusNode();
    final FocusNode createFocus = FocusNode();

    bool dialogOpen = true; // evita tocar controllers después de dispose
    void Function(void Function())? dialogSetSt;

    Future<void> openNameKeyboard() async {
      final result = await showGeneralDialog<String>(
        context: context,
        barrierDismissible: true,
        barrierLabel: 'keyboard',
        transitionDuration: const Duration(milliseconds: 160),
        pageBuilder: (kctx, a1, a2) {
          final mq = MediaQuery.of(kctx);
          final dialogMaxWidth = mq.size.width * 0.95;
          final dialogMaxHeight = mq.size.height * 0.92;
          return SafeArea(
            child: Center(
              child: ConstrainedBox(
                constraints: BoxConstraints(
                  maxWidth: dialogMaxWidth,
                  maxHeight: dialogMaxHeight,
                  minWidth: 280,
                ),
                child: OnScreenKeyboard(
                  initialValue: nameCtl.text,
                  title: 'Nombre del perfil',
                  maxLength: 24,
                  isPin: false,
                ),
              ),
            ),
          );
        },
      );
      if (!dialogOpen) return;
      if (result != null) {
        // si el diálogo sigue abierto, actualizamos controller y reconstruimos
        nameCtl.text = result.trim();
        if (dialogSetSt != null) dialogSetSt!(() {});
      }
    }

    Future<void> openPinKeyboard() async {
      final result = await showGeneralDialog<String>(
        context: context,
        barrierDismissible: true,
        barrierLabel: 'keyboard_pin',
        transitionDuration: const Duration(milliseconds: 160),
        pageBuilder: (kctx, a1, a2) {
          final mq = MediaQuery.of(kctx);
          final dialogMaxWidth = mq.size.width * 0.95;
          final dialogMaxHeight = mq.size.height * 0.92;
          return SafeArea(
            child: Center(
              child: ConstrainedBox(
                constraints: BoxConstraints(
                  maxWidth: dialogMaxWidth,
                  maxHeight: dialogMaxHeight,
                  minWidth: 280,
                ),
                child: OnScreenKeyboard(
                  initialValue: pin ?? '',
                  title: 'Ingrese PIN (4 dígitos)',
                  maxLength: 4,
                  isPin: true,
                ),
              ),
            ),
          );
        },
      );
      if (!dialogOpen) return;
      if (result != null) {
        pin = result.trim();
        if (dialogSetSt != null) dialogSetSt!(() {});
      }
    }

    Future<void> selectAvatar() async {
      final id = DateTime.now().millisecondsSinceEpoch.toString();
      final path = await _pickAvatarAndSave(id);
      if (!dialogOpen) return;
      if (path != null) {
        avatarPath = path;
        if (dialogSetSt != null) dialogSetSt!(() {});
      }
    }

    Future<void> performCreate() async {
      final name = nameCtl.text.trim();
      if (name.isEmpty) {
        if (!dialogOpen) return;
        ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('El nombre no puede estar vacío')));
        return;
      }
      if (isPrivate) {
        if (pin == null || pin!.length != 4) {
          // abrir teclado PIN automáticamente
          await openPinKeyboard();
          if (!dialogOpen) return;
          if (pin == null || pin!.length != 4) {
            if (!dialogOpen) return;
            ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text('El PIN debe tener 4 dígitos')));
            return;
          }
        }
      }
      final id = DateTime.now().millisecondsSinceEpoch.toString();
      String? pinHash;
      if (isPrivate) pinHash = _svc.hashPin(pin!);
      final p = Profile(
        id: id,
        name: name,
        avatarPath: avatarPath,
        isPrivate: isPrivate,
        pinHash: pinHash,
      );
      _profiles.add(p);
      await _svc.saveProfiles(_profiles);
      if (mounted) setState(() {});
      if (!dialogOpen) return;
      Navigator.of(context).pop();
    }

    void reapplyFocus() {
      final idxCancel = isPrivate ? 4 : 3;
      final idxCreate = isPrivate ? 5 : 4;

      switch (selected) {
        case 0:
          nameFocus.requestFocus();
          break;
        case 1:
          privateFocus.requestFocus();
          break;
        case 2:
          if (isPrivate)
            pinFocus.requestFocus();
          else
            avatarFocus.requestFocus();
          break;
        case 3:
          avatarFocus.requestFocus();
          break;
        case 4:
          if (selected == idxCancel)
            cancelFocus.requestFocus();
          else
            createFocus.requestFocus();
          break;
        case 5:
          createFocus.requestFocus();
          break;
      }
    }

    void move(int delta) {
      final maxIndex = isPrivate ? 5 : 4;
      int next = (selected + delta) % (maxIndex + 1);
      if (next < 0) next += (maxIndex + 1);
      if (!isPrivate && next == 2) next = 3; // saltar PIN si no es privado
      if (dialogSetSt != null && dialogOpen) {
        dialogSetSt!(() => selected = next);
      } else {
        selected = next;
      }
      reapplyFocus();
    }

    final removeListener = InputService.instance.pushListener(
      InputListener(
        onLeft: () => move(-1),
        onRight: () => move(1),
        onUp: () => move(-1),
        onDown: () => move(1),
        onActivate: () async {
          if (!dialogOpen) return;
          final idxCancel = isPrivate ? 4 : 3;
          final idxCreate = isPrivate ? 5 : 4;
          switch (selected) {
            case 0:
              await openNameKeyboard();
              break;
            case 1:
              if (dialogSetSt != null) {
                dialogSetSt!(() {
                  isPrivate = !isPrivate;
                  // si activamos privado, mover focus al PIN
                  if (isPrivate) selected = 2;
                  // si desactivamos y selected queda fuera, ajustamos
                  final max = isPrivate ? 5 : 4;
                  if (selected > max) selected = max;
                });
              } else {
                isPrivate = !isPrivate;
              }
              reapplyFocus();
              break;
            case 2:
              if (isPrivate) {
                await openPinKeyboard();
              } else {
                await selectAvatar();
              }
              break;
            case 3:
              // avatar o cancelar dependiendo de isPrivate (pero caso 3 siempre avatar)
              await selectAvatar();
              break;
            case 4:
              if (selected == idxCancel) {
                Navigator.of(context).pop();
              } else if (selected == idxCreate) {
                await performCreate();
              } else {
                // fallback -> avatar
                await selectAvatar();
              }
              break;
            case 5:
              await performCreate();
              break;
          }
        },
        onBack: () => Navigator.of(context).maybePop(),
      ),
    );

    try {
      await showDialog<void>(
        context: context,
        barrierDismissible: true,
        builder: (ctx) {
          return StatefulBuilder(builder: (ctx2, setSt) {
            // exponer setState del diálogo
            dialogSetSt = (fn) {
              if (!dialogOpen) return;
              setSt(fn);
            };

            // asegurar foco cuando se monta
            reapplyFocus();

            final idxCancel = isPrivate ? 4 : 3;
            final idxCreate = isPrivate ? 5 : 4;

            BoxDecoration itemDecoration(int idx, FocusNode fn) {
              final highlighted = selected == idx || fn.hasFocus;
              return BoxDecoration(
                borderRadius: BorderRadius.circular(8),
                color:
                    highlighted ? const Color(0xFF1E1F21) : Colors.transparent,
                border: highlighted ? Border.all(color: Colors.white24) : null,
              );
            }

            return AlertDialog(
              backgroundColor: const Color(0xFF121316),
              content: SizedBox(
                width: 480,
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    // NOMBRE
                    FocusableActionDetector(
                      focusNode: nameFocus,
                      autofocus: selected == 0,
                      onShowFocusHighlight: (hasFocus) {
                        if (hasFocus && dialogOpen)
                          dialogSetSt?.call(() => selected = 0);
                      },
                      child: GestureDetector(
                        onTap: () async {
                          await openNameKeyboard();
                        },
                        child: Container(
                          padding: const EdgeInsets.symmetric(
                              horizontal: 12, vertical: 10),
                          decoration: itemDecoration(0, nameFocus),
                          child: Row(
                            children: [
                              Expanded(
                                child: TextField(
                                  controller: nameCtl,
                                  readOnly: true,
                                  decoration: const InputDecoration.collapsed(
                                      hintText: 'Nombre del perfil'),
                                  style: const TextStyle(color: Colors.white),
                                ),
                              ),
                              const SizedBox(width: 8),
                              const Icon(Icons.keyboard, color: Colors.white70),
                            ],
                          ),
                        ),
                      ),
                    ),

                    const SizedBox(height: 12),

                    // PRIVADO
                    FocusableActionDetector(
                      focusNode: privateFocus,
                      autofocus: selected == 1,
                      onShowFocusHighlight: (hasFocus) {
                        if (hasFocus && dialogOpen)
                          dialogSetSt?.call(() => selected = 1);
                      },
                      child: GestureDetector(
                        onTap: () {
                          if (!dialogOpen) return;
                          dialogSetSt?.call(() {
                            isPrivate = !isPrivate;
                            if (isPrivate) selected = 2;
                            // ajustar selected si quedó fuera
                            final max = isPrivate ? 5 : 4;
                            if (selected > max) selected = max;
                          });
                          reapplyFocus();
                        },
                        child: Container(
                          padding: const EdgeInsets.symmetric(
                              horizontal: 12, vertical: 10),
                          decoration: itemDecoration(1, privateFocus),
                          child: Row(
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              const Text('Privado (PIN de 4 dígitos)',
                                  style: TextStyle(color: Colors.white)),
                              Switch(
                                  value: isPrivate,
                                  onChanged: (v) {
                                    if (!dialogOpen) return;
                                    dialogSetSt?.call(() => isPrivate = v);
                                    reapplyFocus();
                                  })
                            ],
                          ),
                        ),
                      ),
                    ),

                    if (isPrivate) ...[
                      const SizedBox(height: 8),
                      // PIN
                      FocusableActionDetector(
                        focusNode: pinFocus,
                        autofocus: selected == 2,
                        onShowFocusHighlight: (hasFocus) {
                          if (hasFocus && dialogOpen)
                            dialogSetSt?.call(() => selected = 2);
                        },
                        child: GestureDetector(
                          onTap: () async {
                            await openPinKeyboard();
                          },
                          child: Container(
                            padding: const EdgeInsets.symmetric(
                                horizontal: 12, vertical: 10),
                            decoration: itemDecoration(2, pinFocus),
                            child: Row(
                              children: [
                                Expanded(
                                  child: Text(
                                    pin != null && pin!.isNotEmpty
                                        ? 'PIN: ****'
                                        : 'PIN (4 dígitos)',
                                    style: const TextStyle(color: Colors.white),
                                  ),
                                ),
                                const SizedBox(width: 8),
                                const Icon(Icons.lock, color: Colors.white70),
                              ],
                            ),
                          ),
                        ),
                      ),
                    ],

                    const SizedBox(height: 10),

                    // AVATAR
                    FocusableActionDetector(
                      focusNode: avatarFocus,
                      autofocus: selected == (isPrivate ? 3 : 2),
                      onShowFocusHighlight: (hasFocus) {
                        if (hasFocus && dialogOpen)
                          dialogSetSt
                              ?.call(() => selected = (isPrivate ? 3 : 2));
                      },
                      child: GestureDetector(
                        onTap: () async {
                          await selectAvatar();
                        },
                        child: Container(
                          padding: const EdgeInsets.symmetric(
                              horizontal: 12, vertical: 10),
                          decoration:
                              itemDecoration(isPrivate ? 3 : 2, avatarFocus),
                          child: Row(
                            children: [
                              Expanded(
                                child: Text(
                                  avatarPath != null
                                      ? 'Avatar seleccionado'
                                      : 'Seleccionar avatar',
                                  style: const TextStyle(color: Colors.white),
                                ),
                              ),
                              const SizedBox(width: 8),
                              const Icon(Icons.photo, color: Colors.white70),
                            ],
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
              actions: [
                // CANCELAR
                FocusableActionDetector(
                  focusNode: cancelFocus,
                  autofocus: selected == idxCancel,
                  onShowFocusHighlight: (hasFocus) {
                    if (hasFocus && dialogOpen)
                      dialogSetSt?.call(() => selected = idxCancel);
                  },
                  child: GestureDetector(
                    onTap: () => Navigator.of(ctx).pop(),
                    child: Container(
                      padding: const EdgeInsets.symmetric(horizontal: 8),
                      decoration: (selected == idxCancel)
                          ? BoxDecoration(
                              borderRadius: BorderRadius.circular(6),
                              border: Border.all(color: Colors.white24))
                          : null,
                      child: TextButton(
                          onPressed: () => Navigator.of(ctx).pop(),
                          child: const Text('Cancelar')),
                    ),
                  ),
                ),

                // CREAR
                FocusableActionDetector(
                  focusNode: createFocus,
                  autofocus: selected == idxCreate,
                  onShowFocusHighlight: (hasFocus) {
                    if (hasFocus && dialogOpen)
                      dialogSetSt?.call(() => selected = idxCreate);
                  },
                  child: GestureDetector(
                    onTap: () async {
                      await performCreate();
                    },
                    child: Container(
                      padding: const EdgeInsets.symmetric(horizontal: 8),
                      decoration: (selected == idxCreate)
                          ? BoxDecoration(
                              borderRadius: BorderRadius.circular(6),
                              border: Border.all(color: Colors.white24))
                          : null,
                      child: ElevatedButton(
                          onPressed: performCreate,
                          child: const Text('Crear perfil')),
                    ),
                  ),
                ),
              ],
            );
          });
        },
      );
    } finally {
      // First prevent further callbacks from the input service
      try {
        removeListener();
      } catch (_) {}
      // mark dialog closed so other async callbacks won't touch controllers
      dialogOpen = false;
      dialogSetSt = null;

      // Dispose controller
      try {
        nameCtl.dispose();
      } catch (_) {}

      // Unfocus and dispose focus nodes safely. Sometimes a FocusNode may still
      // be attached to the tree and disposing it immediately triggers an
      // assertion ('_dependents.isEmpty'). Unfocus first and swallow errors to
      // avoid crashing the app.
      for (final fn in [
        nameFocus,
        privateFocus,
        pinFocus,
        avatarFocus,
        cancelFocus,
        createFocus
      ]) {
        try {
          // try to remove focus first
          fn.unfocus();
        } catch (_) {}
        try {
          fn.dispose();
        } catch (_) {}
      }
    }
  }

  Future<bool> _askForPinAndVerify(Profile p) async {
    final result = await showGeneralDialog<String>(
      context: context,
      barrierDismissible: true,
      barrierLabel: 'keyboard',
      transitionDuration: const Duration(milliseconds: 160),
      pageBuilder: (ctx, a1, a2) {
        final mq = MediaQuery.of(ctx);
        final dialogMaxWidth = mq.size.width * 0.95;
        final dialogMaxHeight = mq.size.height * 0.92;
        return SafeArea(
          child: Center(
            child: ConstrainedBox(
              constraints: BoxConstraints(
                  maxWidth: dialogMaxWidth,
                  maxHeight: dialogMaxHeight,
                  minWidth: 280),
              child: OnScreenKeyboard(
                  initialValue: '',
                  title: 'Ingresa PIN',
                  maxLength: 4,
                  isPin: true),
            ),
          ),
        );
      },
    );
    if (result == null) return false;
    final pinInput = result.trim();
    if (pinInput.length != 4) {
      ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('El PIN debe tener 4 dígitos')));
      return false;
    }
    final hash = _svc.hashPin(pinInput);
    final ok = hash == p.pinHash;
    if (!ok) {
      ScaffoldMessenger.of(context)
          .showSnackBar(const SnackBar(content: Text('PIN incorrecto')));
    }
    return ok;
  }

  Future<void> _onSelectProfile(Profile p) async {
    if (p.isPrivate && !(await _askForPinAndVerify(p))) return;
    if (!mounted) return;
    ProfileService.instance.setCurrentProfile(p);
    Navigator.of(context)
        .pushReplacement(MaterialPageRoute(builder: (_) => const HomeScreen()));
    AudioService.instance.playAction();
  }

  int get _maxIndex => _profiles.length + 2;

  void _changeSelected(int newIndex) {
    final max = _maxIndex;
    if (newIndex < 0) newIndex = 0;
    if (newIndex > max) newIndex = max;
    if (newIndex == _selectedIndex) return;
    setState(() => _selectedIndex = newIndex);
    const itemExtent = 128.0;
    final target =
        (newIndex <= _profiles.length ? newIndex : _profiles.length) *
            itemExtent;
    try {
      _scrollController.animateTo(target,
          duration: const Duration(milliseconds: 220), curve: Curves.easeOut);
    } catch (_) {}
    try {
      AudioService.instance.playAction();
    } catch (_) {}
  }

  Future<void> _confirmDeleteProfile(Profile p) async {
    final confirmed = await showDialog<bool>(
      context: context,
      builder: (ctx) => AlertDialog(
        backgroundColor: const Color(0xFF121316),
        title: const Text('Eliminar perfil'),
        content: Text(
            '¿Eliminar el perfil "${p.name}"? Esta acción no se puede deshacer.'),
        actions: [
          TextButton(
              onPressed: () => Navigator.of(ctx).pop(false),
              child: const Text('Cancelar')),
          ElevatedButton(
              onPressed: () => Navigator.of(ctx).pop(true),
              child: const Text('Eliminar')),
        ],
      ),
    );
    if (confirmed != true) return;
    _profiles.removeWhere((x) => x.id == p.id);
    await _svc.saveProfiles(_profiles);
    if (_selectedIndex > _profiles.length)
      _selectedIndex = _profiles.length + 1;
    if (mounted) setState(() {});
  }
}
