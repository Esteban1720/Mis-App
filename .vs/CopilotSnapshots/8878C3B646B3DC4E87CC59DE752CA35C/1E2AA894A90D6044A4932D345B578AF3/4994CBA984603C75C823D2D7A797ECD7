// lib/screens/emuchull_login.dart
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:file_picker/file_picker.dart';
import 'package:path_provider/path_provider.dart';

import '../models/profile.dart';
import '../services/profile_service.dart';
import '../services/audio_service.dart';
import '../services/input_service.dart';
import 'home_screen.dart';
import '../widgets/gamepad_listener.dart';
import 'settings_panel.dart';

class EmuChullLoginScreen extends StatefulWidget {
  const EmuChullLoginScreen({Key? key}) : super(key: key);

  @override
  State<EmuChullLoginScreen> createState() => _EmuChullLoginScreenState();
}

class _EmuChullLoginScreenState extends State<EmuChullLoginScreen> {
  final ProfileService _svc = ProfileService.instance;
  List<Profile> _profiles = [];
  bool _loading = true;

  int _selectedIndex = 0;
  final Color bg = const Color(0xFF0F1113);
  final ScrollController _scrollController = ScrollController();

  @override
  void initState() {
    super.initState();
    _loadProfiles();
  }

  @override
  void dispose() {
    try {
      _scrollController.dispose();
    } catch (_) {}
    super.dispose();
  }

  Future<void> _loadProfiles() async {
    _profiles = await _svc.loadProfiles();
    if (mounted) {
      setState(() {
        _loading = false;
      });
    }
  }

  Future<String?> _pickAvatarAndSave(String id) async {
    try {
      final res = await FilePicker.platform.pickFiles(type: FileType.image);
      if (res == null || res.files.isEmpty) return null;
      final file = File(res.files.single.path!);
      final dir = await getApplicationDocumentsDirectory();
      final dest = File('${dir.path}/avatars_$id.png');
      await file.copy(dest.path);
      return dest.path;
    } catch (e) {
      debugPrint('pick avatar error: $e');
      return null;
    }
  }

  Future<void> _showAddProfile() async {
    String? avatarPath;
    String? pin;
    bool isPrivate = false;
    final nameCtl = TextEditingController();

    await showDialog<void>(
      context: context,
      builder: (ctx) {
        return AlertDialog(
          backgroundColor: const Color(0xFF121316),
          content: StatefulBuilder(builder: (ctx2, setSt) {
            return SizedBox(
              width: 420,
              child: SingleChildScrollView(
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    TextField(
                      controller: nameCtl,
                      decoration:
                          const InputDecoration(labelText: 'Nombre del perfil'),
                    ),
                    const SizedBox(height: 12),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        const Text('Privado (PIN de 4 dígitos)',
                            style: TextStyle(color: Colors.white)),
                        Switch(
                            value: isPrivate,
                            onChanged: (v) {
                              isPrivate = v;
                              setSt(() {});
                            })
                      ],
                    ),
                    if (isPrivate) ...[
                      const SizedBox(height: 8),
                      TextField(
                        keyboardType: TextInputType.number,
                        maxLength: 4,
                        obscureText: true,
                        decoration:
                            const InputDecoration(labelText: 'PIN (4 dígitos)'),
                        onChanged: (v) => pin = v,
                      ),
                    ],
                    const SizedBox(height: 10),
                    ElevatedButton.icon(
                      onPressed: () async {
                        final id =
                            DateTime.now().millisecondsSinceEpoch.toString();
                        final path = await _pickAvatarAndSave(id);
                        if (path != null) {
                          avatarPath = path;
                          setSt(() {});
                        }
                      },
                      icon: const Icon(Icons.photo),
                      label: const Text('Seleccionar avatar'),
                      style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.white),
                    ),
                  ],
                ),
              ),
            );
          }),
          actions: [
            TextButton(
                onPressed: () => Navigator.of(ctx).pop(),
                child: const Text('Cancelar')),
            ElevatedButton(
                onPressed: () async {
                  final name = nameCtl.text.trim();
                  if (name.isEmpty) return;
                  final id = DateTime.now().millisecondsSinceEpoch.toString();
                  String? pinHash;
                  if (isPrivate) {
                    if (pin?.length != 4) {
                      ScaffoldMessenger.of(context).showSnackBar(const SnackBar(
                          content: Text('El PIN debe tener 4 dígitos')));
                      return;
                    }
                    pinHash = _svc.hashPin(pin!);
                  }
                  final p = Profile(
                      id: id,
                      name: name,
                      avatarPath: avatarPath,
                      isPrivate: isPrivate,
                      pinHash: pinHash);
                  _profiles.add(p);
                  await _svc.saveProfiles(_profiles);
                  if (mounted) setState(() {});
                  Navigator.of(ctx).pop();
                },
                child: const Text('Crear perfil'))
          ],
        );
      },
    );
  }

  Future<void> _deleteProfile(Profile p) async {
    final confirmed = await showDialog<bool>(
      context: context,
      builder: (ctx) => AlertDialog(
        backgroundColor: const Color(0xFF121316),
        title: const Text('Eliminar perfil'),
        content: Text('¿Seguro que deseas eliminar el perfil "${p.name}"?'),
        actions: [
          TextButton(
              onPressed: () => Navigator.of(ctx).pop(false),
              child: const Text('Cancelar')),
          ElevatedButton(
              style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
              onPressed: () => Navigator.of(ctx).pop(true),
              child: const Text('Eliminar')),
        ],
      ),
    );
    if (confirmed == true) {
      _profiles.removeWhere((x) => x.id == p.id);
      await _svc.saveProfiles(_profiles);
      if (mounted) setState(() {});
    }
  }

  Future<bool> _askForPinAndVerify(Profile p) async {
    // Usar OnScreenKeyboard para PIN
    final pin = await showGeneralDialog<String>(
      context: context,
      barrierDismissible: true,
      barrierLabel: 'PIN',
      transitionDuration: const Duration(milliseconds: 160),
      pageBuilder: (ctx, a1, a2) {
        return Center(
          child: ConstrainedBox(
            constraints: const BoxConstraints(maxWidth: 380),
            child: OnScreenKeyboard(
              initialValue: '',
              title: 'Ingresa PIN',
              maxLength: 4,
              isPin: true,
            ),
          ),
        );
      },
    );
    if (pin != null && pin.length == 4) {
      final hash = _svc.hashPin(pin);
      if (hash == p.pinHash) return true;
    }
    ScaffoldMessenger.of(context)
        .showSnackBar(const SnackBar(content: Text('PIN incorrecto')));
    return false;
  }

  Widget _buildProfileTile(Profile p, bool focused) {
    return MouseRegion(
      cursor: SystemMouseCursors.click,
      child: GestureDetector(
        onTap: () => _onSelectProfile(p),
        child: Stack(
          alignment: Alignment.topRight,
          children: [
            Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                AnimatedContainer(
                  duration: const Duration(milliseconds: 160),
                  width: focused ? 96 : 88,
                  height: focused ? 96 : 88,
                  decoration: BoxDecoration(
                      shape: BoxShape.circle,
                      color: const Color(0xFF1B1C1E),
                      border: Border.all(
                          color: focused ? Colors.white : Colors.transparent,
                          width: 2)),
                  child: ClipOval(
                    child: p.avatarPath != null && File(p.avatarPath!).existsSync()
                        ? Image.file(File(p.avatarPath!),
                            fit: BoxFit.cover, width: 96, height: 96)
                        : Center(
                            child: Text(
                                p.name.isNotEmpty ? p.name[0].toUpperCase() : '?',
                                style: const TextStyle(
                                    color: Colors.white, fontSize: 28))),
                  ),
                ),
                const SizedBox(height: 8),
                SizedBox(
                    width: 110,
                    child: Text(p.name,
                        overflow: TextOverflow.ellipsis,
                        textAlign: TextAlign.center,
                        style: const TextStyle(color: Colors.white))),
              ],
            ),
            if (focused)
              IconButton(
                icon: const Icon(Icons.delete, color: Colors.red, size: 22),
                tooltip: 'Eliminar perfil',
                onPressed: () => _deleteProfile(p),
              ),
          ],
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: bg,
      body: GamepadListener(
        onLeft: () => _changeSelected(_selectedIndex - 1),
        onRight: () => _changeSelected(_selectedIndex + 1),
        onUp: () => _changeSelected(_selectedIndex - 1),
        onDown: () => _changeSelected(_selectedIndex + 1),
        onActivate: () {
          if (_selectedIndex == 0) {
            _showAddProfile();
          } else if (_selectedIndex > 0 && _selectedIndex <= _profiles.length) {
            final p = _profiles[_selectedIndex - 1];
            _onSelectProfile(p);
          } else if (_selectedIndex == _profiles.length + 1) {
            Navigator.of(context).push(
              MaterialPageRoute(builder: (_) => SettingsPanel()),
            );
          } else if (_selectedIndex == _profiles.length + 2) {
            exit(0);
          }
        },
        onBack: () {
          Navigator.maybePop(context);
        },
        child: SafeArea(
          child: _loading
              ? const Center(child: CircularProgressIndicator())
              : Padding(
                  padding:
                      const EdgeInsets.symmetric(horizontal: 20, vertical: 24),
                  child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Row(children: [
                          Container(
                              width: 86,
                              height: 86,
                              decoration: BoxDecoration(
                                  color: const Color(0xFF18191A),
                                  borderRadius: BorderRadius.circular(18)),
                              child: const Center(
                                  child: Icon(Icons.videogame_asset,
                                      color: Colors.white, size: 38))),
                          const SizedBox(width: 14),
                          const Text('EMUCHULL',
                              style: TextStyle(
                                  color: Colors.white,
                                  fontSize: 42,
                                  fontWeight: FontWeight.w900)),
                        ]),
                        const SizedBox(height: 30),
                        const Text('¿Quién está usando este control?',
                            style:
                                TextStyle(color: Colors.white, fontSize: 18)),
                        const SizedBox(height: 18),
                        SizedBox(
                          height: 160,
                          child: ListView.separated(
                            controller: _scrollController,
                            scrollDirection: Axis.horizontal,
                            itemCount: _profiles.length + 1,
                            separatorBuilder: (context, index) => const SizedBox(width: 18),
                            itemBuilder: (context, i) {
                              if (i == 0) {
                                final focused = _selectedIndex == 0;
                                return GestureDetector(
                                  onTap: _showAddProfile,
                                  child: Column(children: [
                                    AnimatedContainer(
                                      duration: const Duration(milliseconds: 160),
                                      width: focused ? 96 : 88,
                                      height: focused ? 96 : 88,
                                      decoration: BoxDecoration(
                                        color: const Color(0xFF1B1C1E),
                                        borderRadius: BorderRadius.circular(999),
                                      ),
                                      child: const Center(
                                        child: Icon(Icons.add, color: Colors.white, size: 38),
                                      ),
                                    ),
                                    const SizedBox(height: 8),
                                    SizedBox(
                                      width: 110,
                                      child: Text('Agregar usuario',
                                        textAlign: TextAlign.center,
                                        style: const TextStyle(color: Colors.white),
                                      ),
                                    ),
                                  ]),
                                );
                              } else {
                                final p = _profiles[i - 1];
                                final focused = _selectedIndex == i;
                                return _buildProfileTile(p, focused);
                              }
                            },
                          ),
                        ),
                        const Spacer(),
                        Row(
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              Text('Selecciona un perfil para continuar',
                                  style: TextStyle(
                                      color: Colors.white.withOpacity(0.75))),
                              Row(children: [
                                // Botón de configuración navegable
                                FocusableActionDetector(
                                  autofocus: _selectedIndex == _profiles.length + 1,
                                  onShowFocusHighlight: (hasFocus) {
                                    if (hasFocus && _selectedIndex != _profiles.length + 1) {
                                      setState(() => _selectedIndex = _profiles.length + 1);
                                    }
                                  },
                                  child: IconButton(
                                    onPressed: () {
                                      Navigator.of(context).push(
                                        MaterialPageRoute(builder: (_) => SettingsPanel()),
                                      );
                                    },
                                    icon: Icon(Icons.settings,
                                        color: _selectedIndex == _profiles.length + 1
                                            ? Colors.amber
                                            : Colors.white),
                                  ),
                                ),
                                // Botón de cerrar app navegable
                                FocusableActionDetector(
                                  autofocus: _selectedIndex == _profiles.length + 2,
                                  onShowFocusHighlight: (hasFocus) {
                                    if (hasFocus && _selectedIndex != _profiles.length + 2) {
                                      setState(() => _selectedIndex = _profiles.length + 2);
                                    }
                                  },
                                  child: IconButton(
                                    onPressed: () {
                                      exit(0);
                                    },
                                    icon: Icon(Icons.power_settings_new,
                                        color: _selectedIndex == _profiles.length + 2
                                            ? Colors.amber
                                            : Colors.white),
                                  ),
                                ),
                              ])
                            ])
                      ]),
                ),
        ),
      ),
    );
  }
}
