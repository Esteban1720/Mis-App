// lib/services/audio_service.dart
import 'dart:async';
import 'package:flutter/scheduler.dart';
import 'package:audioplayers/audioplayers.dart';
import 'settings_service.dart';

/// Servicio singleton para efectos de sonido (SFX).
/// Centraliza la creación de AudioPlayers para evitar crear/destruir
/// repetidamente y reducir la probabilidad de errores de threading
/// en el plugin audioplayers.
class AudioService {
  AudioService._internal();
  static final AudioService instance = AudioService._internal();

  final AudioPlayer _nav = AudioPlayer();
  final AudioPlayer _action = AudioPlayer();
  final AudioPlayer _launch = AudioPlayer();

  bool _initialized = false;

  Future<void> init() async {
    if (_initialized) return;
    _initialized = true;

    try {
      await _nav.setSource(AssetSource('sounds/nav.wav'));
    } catch (_) {}
    try {
      await _action.setSource(AssetSource('sounds/action.wav'));
    } catch (_) {}
    try {
      await _launch.setSource(AssetSource('sounds/launch.wav'));
    } catch (_) {}

    try {
      await _launch.setReleaseMode(ReleaseMode.release);
      await _nav.setReleaseMode(ReleaseMode.release);
      await _action.setReleaseMode(ReleaseMode.release);
    } catch (_) {}

    // Aplicar volúmenes iniciales desde settings
    applyVolumesFromSettings();

    // Escuchar cambios de settings para mantener sincronía
    final s = SettingsService.instance;
    s.masterVolume.addListener(applyVolumesFromSettings);
    s.sfxVolume.addListener(applyVolumesFromSettings);
    s.musicVolume.addListener(applyVolumesFromSettings);
  }

  void applyVolumesFromSettings() {
    final s = SettingsService.instance;
    final master = s.masterVolume.value;
    final sfx = s.sfxVolume.value;

    // Ejecutar en la cola del UI / post-frame para reducir riesgos de threading.
    Future.microtask(() {
      try {
        _nav.setVolume((master * sfx).clamp(0.0, 1.0));
      } catch (_) {}
      try {
        _action.setVolume((master * sfx).clamp(0.0, 1.0));
      } catch (_) {}
      try {
        _launch.setVolume((master * sfx).clamp(0.0, 1.0));
      } catch (_) {}
    });
  }

  void _runOnMain(FutureOr<void> Function() fn) {
    // Asegura ejecutar la llamada a la API del plugin en la cola principal.
    SchedulerBinding.instance.addPostFrameCallback((_) {
      try {
        fn();
      } catch (_) {}
    });
  }

  void playNav() {
    _runOnMain(() async {
      try {
        await _nav.seek(Duration.zero);
        await _nav.resume();
      } catch (_) {
        try {
          await _nav.play(AssetSource('sounds/nav.wav'));
        } catch (_) {}
      }
    });
  }

  void playAction() {
    _runOnMain(() async {
      try {
        await _action.seek(Duration.zero);
        await _action.resume();
      } catch (_) {
        try {
          await _action.play(AssetSource('sounds/action.wav'));
        } catch (_) {}
      }
    });
  }

  void playLaunch() {
    _runOnMain(() async {
      try {
        await _launch.seek(Duration.zero);
        await _launch.resume();
      } catch (_) {
        try {
          await _launch.play(AssetSource('sounds/launch.wav'));
        } catch (_) {}
      }
    });
  }

  Future<void> dispose() async {
    try {
      await _nav.dispose();
    } catch (_) {}
    try {
      await _action.dispose();
    } catch (_) {}
    try {
      await _launch.dispose();
    } catch (_) {}
    _initialized = false;
  }
}
